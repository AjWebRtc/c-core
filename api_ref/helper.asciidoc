= PubNub Posix C API Reference

* <<pubnub_parse_publish_result,pubnub_parse_publish_result>>
* <<pubnub_res_2_string,pubnub_res_2_string>>

== pubnub_parse_publish_result

===== enum pubnub_publish_res pubnub_parse_publish_result(char const *result)

===== DESCRIPTION
Parses the given publish result. You usually obtain this with pubnub_last_publish_result().

===== METHODS

[width="40%",frame="topbot",options="header,footer"]
|======================
|Parameter | Type | Required | Description
| result | char const* | Yes | Publish Result
|======================

===== RETURNS
[width="40%",frame="topbot",options="header,footer"]
|======================
| Type | Description
| enum pubnub_publish_res | result of publish response parsing
|======================

===== BASIC USAGE
```
enum pubnub_res res;
pubnub_t *pbp = pubnub_alloc();
if (NULL == pbp) {
    printf("Failed to allocate Pubnub context!\n");
    return -1;
}
pubnub_init(pbp, "demo", "demo");

res = pubnub_publish(pbp, chan, "\"Hello world from sync!\"");
if (res != PNR_STARTED) {
    printf("pubnub_publish() returned unexpected: %d\n", res);
    pubnub_free(pbp);
    return -1;
}
res = pubnub_await(pbp);

if (PNR_PUBLISH_FAILED == res) {
  enum pubnub_publish_res publ_res = pubnub_parse_publish_result(pubnub_last_publish_result(pbp));
  switch (publ_res) {
  case PNPUB_INVALID_JSON: printf("Invalid JSON was sent in the publish message\n"); break;
  default: break;
  }
}
```

===== OTHER EXAMPLES


== pubnub_res_2_string

===== char const* pubnub_res_2_string(enum pubnub_res e)

===== DESCRIPTION
Returns a string (in English) describing a Pubnub result enum

===== METHODS

[width="40%",frame="topbot",options="header,footer"]
|======================
|Parameter | Type | Required | Description
| p | enum pubnub_res | Yes | Pubnub result enum value
|======================

===== RETURNS
[width="40%",frame="topbot",options="header,footer"]
|======================
| Type | Description
| char const* | String describing pubnub result
|======================

===== BASIC USAGE
```
enum pubnub_res res;
pubnub_t *pbp = pubnub_alloc();
if (NULL == pbp) {
    printf("Failed to allocate Pubnub context!\n");
    return -1;
}
pubnub_init(pbp, "demo", "demo");

res = pubnub_publish(pbp, chan, "\"Hello world from sync!\"");
if (res != PNR_STARTED) {
    printf("pubnub_publish() returned unexpected: %d\n", res);
    pubnub_free(pbp);
    return -1;
}
res = pubnub_await(pbp);

```


===== OTHER EXAMPLES
