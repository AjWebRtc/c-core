= PubNub Posix C API Reference

== pubnub_init

===== DESCRIPTION
Initialize a given pubnub context p to the publish_key and subscribe_key.
You can customize other parameters of the context by the configuration function calls below.

The publish_key and subscribe key are expected to be valid (ASCIIZ string) pointers throughout the use of context p,
that is, until either you call pubnub_done(), or the otherwise stop using it (like when the whole software/ firmware 
stops working). So, the contents of these keys are not copied to the Pubnub context p.

This should be called after TCP initialization.

===== METHODS

[width="40%",frame="topbot",options="header,footer"]
|======================
|Parameter | Type | Required | Description
|p        |pubnub_t* | Yes | Pointer to the Context to initialize (use pubnub_get_ctx() to obtain it)
|publish_key  | char * | | Pointer to the string of the key to use when publishing messages
|subscribe_key  | char * | | Pointer to the string of the key to use when subscribing to messages

|======================

===== RETURNS
void

===== BASIC USAGE
```
pubnub_t *ctx = pubnub_alloc();
if (NULL == ctx) {
    puts(“Couldn’t allocate a Pubnub context”);
    return -1;
}
pubnub_init(ctx, “demo”, “demo”);
```
===== OTHER EXAMPLES

== pubnub_set_uuid

===== DESCRIPTION

Set the UUID identification of PubNub client context p to uuid. Pass NULL to unset.

[NOTE}
The uuid is expected to be valid (ASCIIZ string) pointers throughout the use of context p, that is, until either you call pubnub_done() on p, or the otherwise stop using it (like when the whole software/ firmware stops working). So, the contents of the uuid string is not copied to the Pubnub context p.

===== METHODS

[width="40%",frame="topbot",options="header,footer"]
|======================
|Parameter | Type | Required | Description
| p | pubnub_t* | Yes | Pointer to pubnub context. |
| uuid | const char* | Pointer to uuid string |
|======================

===== RETURNS
void

===== BASIC USAGE
```
pubnub_t *ctx = pubnub_alloc();
if (NULL == ctx) {
    puts(“Couldn’t allocate a Pubnub context”);
    return -1;
}
pubnub_init(ctx, “demo”, “demo”);
pubnub_set_uuid(ctx, "my_uuid");
```
===== OTHER EXAMPLES


== pubnub_uuid_get 

===== DESCRIPTION

Get the UUID identification of PubNub client context p. After pubnub_init(), it will return NULL until you change it to non-NULL via pubnub_set_uuid().

===== METHODS

[width="40%",frame="topbot",options="header,footer"]
|======================
|Parameter | Type | Required | Description
p | pubnub_t* | Yes | Pointer to pubnub client context.
|======================

===== RETURNS
char const*

===== BASIC USAGE
```
pubnub_t *ctx = pubnub_alloc();
if (NULL == ctx) {
    puts(“Couldn’t allocate a Pubnub context”);
    return -1;
}
pubnub_init(ctx, “demo”, “demo”);
pubnub_set_uuid(ctx, "my_uuid");
printf("UUID is %s", pubnub_get_uuid(ctx));
```
===== OTHER EXAMPLES




==

===== DESCRIPTION

===== METHODS

[width="40%",frame="topbot",options="header,footer"]
|======================
|Parameter | Type | Required | Description

|======================

===== RETURNS

===== BASIC USAGE

===== OTHER EXAMPLES
